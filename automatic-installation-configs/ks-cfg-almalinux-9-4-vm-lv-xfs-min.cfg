#
# Requires AlmaLinix 9.4 min iso file, and rebuild tools to apply kickstart cfg. Contains config for Virtual Machine, xfs,lvm, secure boot.
# Attach config to the iso and is ready to be installed on system. Simply configuration.
# DHCP, LVM using Cis Benchmark setup for partition, selinux enable, with custom users etc.
# Replace default sub user, password for that user and root password and you are ready to go.
#
# Tested on vmware, virtualbox, kvm, proxmox. 
# Please use UEFI boot!
#
cdrom


# Use text install
text


# System language
lang en_US

# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'

# System services
services --enabled="chronyd"

# System timezone
timezone Europe/Paris --utc --ntpservers=pool.ntp.org

rootpw --iscrypted $6$HiHGne6Le31/zn5U$Cih5VOzLorq8t99xPVsjDYoxSDpJ/EFaOR.HJBjbho7KgV7nC53f8orHGwxO0xWOZNEdHXT1jUWHHLTz3Uyvu/


# Run the Setup Agent on first boot
firstboot --disable



# Firewall configuration
firewall --enabled --service=ssh  --trust=eth0


#skip x window
skipx






# User Configuration
user --name=testuser --iscrypted --password=$6$u4ET0jGOfq0vicIH$RU/onQfofdhkLObPJPX5vSGXLnKphBttMXxv.p4kPaunzf4MtUzd90pgz9cE5/4L/zzcwJKtRKvpfeUPGaRzu/ --groups=wheel
sshkey --username=testuser "ssh_key"



%packages
@^minimal-environment   # Selects the "Minimal Install" environment
@core                   # Basic system utilities
dnf
kernel
yum
nfs-utils
dnf-utils
grub2-pc
grub2-efi-x64
shim

# pull firmware packages out
-aic94xx-firmware
-alsa-firmware
-alsa-lib
-alsa-tools-firmware
-ivtv-firmware
-iwl1000-firmware
-iwl100-firmware
-iwl105-firmware
-iwl135-firmware
-iwl2000-firmware
-iwl2030-firmware
-iwl3160-firmware
-iwl3945-firmware
-iwl4965-firmware
-iwl5000-firmware
-iwl5150-firmware
-iwl6000-firmware
-iwl6000g2a-firmware
-iwl6000g2b-firmware
-iwl6050-firmware
-iwl7260-firmware
-libertas-sd8686-firmware
-libertas-sd8787-firmware
-libertas-usb8388-firmware

# We need this image to be portable; also, rescue mode isn't useful here.
dracut-config-generic
dracut-norescue



# Some things from @core we can do without in a minimal install
-biosdevname
-plymouth
NetworkManager
-iprutils

# Because we need networking
dhcp-client

# Minimal Cockpit web console
-cockpit-ws
-cockpit-system
-subscription-manager-cockpit

# Exclude all langpacks for now
-langpacks-*
-langpacks-en

# We are building RHEL
-redhat-release
-redhat-release-eula

# Add rng-tools as source of entropy
-rng-tools

# RH Insights client, for public cloud providers
-insights-client


%end



# Reboot after installation
reboot





%post --interpreter=/usr/bin/bash --erroronfail --log /root/post-install.log
BASE_SYSTEM=$(grep '^ID_LIKE=' /etc/os-release | awk -F= '{print $2}' | tr -d '"' | awk   '{print $1}')
VERSION_ID=$(grep '^VERSION_ID=' /etc/os-release | awk -F= '{print $2}' | tr -d '"')


# Check if system is booted in EFI mode
if [ -d /sys/firmware/efi ]; then
    echo "System is booted in EFI mode." > /tmp/boot-mode-check.log
    echo "efi" > /tmp/boot-mode
else
    echo "System is booted in Legacy BIOS mode." > /tmp/boot-mode-check.log
    echo "bios" > /tmp/boot-mode
fi

# Log boot mode for debugging
cat /tmp/boot-mode-check.log >> /tmp/pre-install.log


# User Configuration

# Set user password age minimum
chage -M 99999 testuser





# lock root account
passwd -l root


# Log boot mode from %pre section
# Get OS ID
ID=$(grep '^ID=' /etc/os-release | awk -F= '{print $2}' | tr -d '"')

# Get Boot Mode
BOOT_MODE=$(cat /tmp/boot-mode)
echo "Detected boot mode: $BOOT_MODE" >> /root/post-install.log

# GRUB configuration based on boot mode
if [ "$BOOT_MODE" = "efi" ]; then
    echo "Configuring EFI bootloader..." >> /root/post-install.log

    # Check if EFI directory exists
    if [ -d /boot/efi/ ]; then
        # Check if the specific OS directory exists
        if [ -d "/boot/efi/EFI/$ID" ]; then
            echo "EFI directory for $ID found: /boot/efi/EFI/$ID" >> /root/post-install.log
            grub2-mkconfig -o "/boot/efi/EFI/$ID/grub.cfg"
        else
            echo "EFI directory for $ID not found!" >> /root/post-install.log
            mkdir -p "/boot/efi/EFI/$ID"  # Create directory if missing
            grub2-mkconfig -o "/boot/efi/EFI/$ID/grub.cfg"
        fi
    else
        echo "EFI bootloader directory not found!" >&2
        echo "Please ensure /boot/efi is mounted properly." >> /root/post-install.log
    fi
else
    echo "Configuring Legacy BIOS bootloader..." >> /root/post-install.log

    # Check if Legacy GRUB configuration file exists
    if [ -e /boot/grub2/grub.cfg ]; then
        grub2-mkconfig -o /boot/grub2/grub.cfg
    else
        echo "Legacy GRUB configuration file not found!" >&2
        grub2-mkconfig -o /boot/grub2/grub.cfg
    fi
fi




#############################################
#############################################
#####        Netowrk Configuration      #####
#############################################
#############################################
# Detect base system (RHEL-based or Debian-based)


# Set up Jinja2 variables passed from Ansible
IPADDR="192.168.122.100"
NETMASK="255.255.255.0"
GATEWAY="192.168.122.1"
DNS1="8.8.8.8"
DNS2="8.8.4.4"
NETWORK_MODE="dhcp"  # 'dhcp' or 'static'

# Detect the primary network interface (ignoring 'lo')
NET_IFACE=$(ls /sys/class/net | grep -v lo | head -n 1)

# Check if a network interface is found
if [ -z "$NET_IFACE" ]; then
    echo "No network interface found. Skipping network configuration."
    # You can perform other tasks here if needed
    exit 0
fi

# Configure network based on detected base system and mode
if [ "$NETWORK_MODE" = "dhcp" ]; then
    if [ "$BASE_SYSTEM" = "rhel" ] || [ "$BASE_SYSTEM" = "centos" ] || [ "$BASE_SYSTEM" = "fedora" ]; then
        # RHEL-based DHCP configuration
        cat <<EOF > /etc/sysconfig/network-scripts/ifcfg-$NET_IFACE
DEVICE=$NET_IFACE
BOOTPROTO=dhcp
ONBOOT=yes
EOF

        # Restart network service (RHEL-based)
        if command -v systemctl &> /dev/null; then
            systemctl restart network
        else
            service network restart
        fi

    elif [ "$BASE_SYSTEM" = "debian" ] || [ "$BASE_SYSTEM" = "ubuntu" ]; then
        # Debian-based DHCP configuration
        cat <<EOF > /etc/network/interfaces.d/$NET_IFACE.cfg
auto $NET_IFACE
iface $NET_IFACE inet dhcp
EOF

        # Restart networking (Debian-based)
        if command -v systemctl &> /dev/null; then
            systemctl restart networking
        else
            service networking restart
        fi
    else
        echo "Unknown base system: $BASE_SYSTEM"
        exit 1
    fi

elif [ "$NETWORK_MODE" = "static" ]; then
    if [ "$BASE_SYSTEM" = "rhel" ] || [ "$BASE_SYSTEM" = "centos" ] || [ "$BASE_SYSTEM" = "fedora" ] || [ "$BASE_SYSTEM" = "almalinux" ] || [ "$BASE_SYSTEM" = "rocky" ]; then
        # RHEL-based static IP configuration
        cat <<EOF > /etc/sysconfig/network-scripts/ifcfg-$NET_IFACE
DEVICE=$NET_IFACE
BOOTPROTO=none
ONBOOT=yes
IPADDR=$IPADDR
NETMASK=$NETMASK
GATEWAY=$GATEWAY
DNS1=$DNS1
DNS2=$DNS2
EOF

        # Restart network service (RHEL-based)
        if command -v systemctl &> /dev/null; then
            systemctl restart network
        else
            service network restart
        fi

elif [ "$BASE_SYSTEM" = "debian" ] || [ "$BASE_SYSTEM" = "ubuntu" ]; then
        # Debian-based static IP configuration
        cat <<EOF > /etc/network/interfaces.d/$NET_IFACE.cfg
auto $NET_IFACE
iface $NET_IFACE inet static
    address $IPADDR
    netmask $NETMASK
    gateway $GATEWAY
    dns-nameservers $DNS1 $DNS2
EOF

        # Restart networking (Debian-based)
        if command -v systemctl &> /dev/null; then
            systemctl restart networking
        else
            service networking restart
        fi
    else
        echo "Unknown base system: $BASE_SYSTEM"
        exit 1
    fi

else
    echo "Unknown network mode: $NETWORK_MODE"
    exit 1
fi

#############################################
#############################################
#####        Netowrk Configuration      #####
#############################################
#############################################



#SeLinux on rhel only
# Set SELinux boolean based on base system
if [ "$BASE_SYSTEM" = "rhel" ] || [ "$BASE_SYSTEM" = "centos" ] || [ "$BASE_SYSTEM" = "fedora" ] || [ "$BASE_SYSTEM" = "almalinux" ] || [ "$BASE_SYSTEM" = "rocky" ]; then
    # RHEL-based systems: Set SELinux boolean
    setsebool -P domain_kernel_load_modules on
fi



# this is installed by default but we don't need it in virt
echo "Removing linux-firmware package."
dnf -C -y remove linux-firmware

echo "Fixing SELinux contexts."
touch /var/log/cron
touch /var/log/boot.log
mkdir -p /var/cache/yum
/usr/sbin/fixfiles -R -a restore


# Anaconda is writing to /etc/resolv.conf from the generating environment.
# The system should start out with an empty file.
truncate -s 0 /etc/resolv.conf

cat >> /root/pre-install.log << "EOF"
%include /tmp/pre-install.log
EOF



%end
%pre --log /tmp/pre-install.log
#!/bin/sh
echo "#staritng partiton schema file" > /tmp/partition-schema



# List all hard drives and remove everything after the dot or comma
list-harddrives | awk '{print $1 " " int($2)}' > /tmp/drives-info.txt

#ToDo  add if is physical variables is used  to use use disk by id instead of sda/sb etc

# Count the number of drives
num_drives=$(list-harddrives | wc -l)
echo $num_drives > /tmp/num-drives.txt

# If drivesNubmerToUses is set, limit the number of drives used
if [ "$num_drives" -gt "2" ]; then
 # Create a list of unused drives
 unused_drives=$(list-harddrives | tail -n +$(( 2 + 1 )) | awk '{print $1}' | paste -sd "," -)
 
 # Add ignoredisk command to schema
 echo "ignoredisk --drives=$unused_drives" >> /tmp/partition-schema

 # Update drives-info.txt with only the drives that should be used
 head -n "2" /tmp/drives-info.txt > /tmp/filtered-drives.txt
 mv /tmp/filtered-drives.txt /tmp/drives-info.txt

 # Update num-drives.txt with the new number of drives
 echo "2" > /tmp/num-drives.txt
fi

total_size=0
drive_size_bigger_than2tb=0
drive_2tb=1800000
drive_size_bigger_than100gb=0
drive_100gb=100000
first_drive_size=0
first_drive_system=sda
sizes_match=true
drive_size_bigger_than="no" 


disk_size_higher=50


first_drive_system=$(cat /tmp/drives-info.txt | awk '{print $1}' | head -n1)
first_drive_size=$(cat /tmp/drives-info.txt | awk '{print $2}' | cut -d. -f1)
drive_count=$(wc -l < /tmp/drives-info.txt)

while read -r line; do
    drive_size=$(echo "$line" | awk '{print $2}' | cut -d. -f1)
    
  
    if [ "$drive_size" -ne "$first_drive_size" ]; then
        sizes_match=false
    fi
done < /tmp/drives-info.txt

if [ "$sizes_match" = false ]; then
    echo "Warning: Drive sizes are different."
fi

boot_size=$((2  * 1024))


  drive_size_bigger_than="yes" 
  echo "bootloader --append=\" crashkernel=auto\" --location=none --boot-drive=$first_drive_system" >> /tmp/partition-schema  
  echo "clearpart --all --initlabel --disklabel gpt" >> /tmp/partition-schema     



#for 200 gb we want to increase size of partitions
if [ "$first_drive_size" -ge "$((drive_100gb * 2))" ]; then
drive_size_bigger_than100gb=2
root_size=$((10 * 3  * 1024))
home_size=$((4 * 3  * 1024))
var_size=$((8 * 3  * 1024))
tmp_size=$((2 * 3  * 1024))
opt_size=$((4 * 3  * 1024))
var_tmp_size=$(((2  * 3 ) *  1024))
var_log_size=$((4 * 3  *  1024))
var_log_audit_size=$((4 * 3   * 1024))
fi

#for 100 gb we want increase size of partitions
if [ "$first_drive_size" -ge "$drive_100gb" ]; then
drive_size_bigger_than100gb=1
root_size=$((10 * 2  * 1024))
home_size=$((4 * 2  * 1024))
var_size=$((8 * 2  * 1024))
tmp_size=$((2 * 2  * 1024))
opt_size=$((4 * 2  * 1024))
var_tmp_size=$((2  * 2  *  1024))
var_log_size=$((4 * 2  *  1024))
var_log_audit_size=$((4 * 2  * 1024))

else

root_size=$((10 * 1024))
home_size=$((4 * 1024))
var_size=$((8 * 1024))
tmp_size=$((2 * 1024))
opt_size=$((4 * 1024))
var_tmp_size=$((2 * 1024))
var_log_size=$((4 * 1024))
var_log_audit_size=$((4 * 1024))

fi
swap_size=$((4 * 1024))
total_size=$((boot_size + root_size + home_size + var_size + tmp_size + var_tmp_size + var_log_size + var_log_audit_size + swap_size))
if [ "$total_size" -ge "$first_drive_size" ]; then
    echo "Error: Not enough space for root partition."
    exit 1
fi


echo "part /boot/efi --fstype=vfat --size=$boot_size --asprimary --ondrive=$first_drive_system  " >> /tmp/partition-schema
#--fsoptions=\"umask=0077,shortname=winnt\"

touch /tmp/lvm-pve
counterDrives=1
while IFS= read -r line && [ $counterDrives -le $drive_count ]; do
DRIVE=$(echo "$line" | awk '{print $1}')  # Extract the drive name (e.g., sda, sdb)

# Append the part command to the output file
echo "part pv.$counterDrives --fstype=\"lvmpv\" --ondrive=$DRIVE --size=$total_size" >> /tmp/partition-schema
echo "pv.$counterDrives"  >> /tmp/lvm-pve
((counterDrives++))
done < /tmp/drives-info.txt

echo "volgroup vg0-root $(cat /tmp/lvm-pve | awk '{print $1}' | paste -sd " ")" >> /tmp/partition-schema
echo "logvol /tmp --fstype=xfs --vgname=vg0-root --size=$tmp_size --name=lv_tmp" >> /tmp/partition-schema

echo "logvol swap --fstype=\"swap\"  --vgname=vg0-root --size=$swap_size --name=lv_swap" >> /tmp/partition-schema
echo "logvol /home --fstype=xfs --vgname=vg0-root --size=$home_size --name=lv_home" >> /tmp/partition-schema
echo "logvol /var --fstype=xfs --vgname=vg0-root --size=$home_size --name=lv_var" >> /tmp/partition-schema
echo "logvol / --fstype=xfs --vgname=vg0-root --size=$root_size --name=lv_root" >> /tmp/partition-schema
echo "logvol /var/tmp --fstype=xfs --vgname=vg0-root --size=$var_tmp_size --name=lv_var_tmp" >> /tmp/partition-schema
echo "logvol /var/log --fstype=xfs --vgname=vg0-root --size=$var_log_size --name=lv_var_log" >> /tmp/partition-schema
echo "logvol /var/log/audit --fstype=xfs --vgname=vg0-root --size=$var_log_audit_size --name=lv_var_log_audit" >> /tmp/partition-schema


%end

%include /tmp/partition-schema